schema {
  query: RootQuery
}

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type AggregateAttribute {
  traitType: String!
  valueMetrics: [AggregateAttributeValue!]!
}

input AggregateAttributesQueryInput {
  collectionAddresses: [String!] = null
  ownerAddresses: [String!] = null
  tokens: [TokenInput!] = null
}

type AggregateAttributeValue {
  value: String!
  count: Int!
  percent: Float!
}

type AggregateStat {
  floorPrice(where: CollectionAddressAndAttributesInput!, networks: [NetworkInput!] = null): Float
  nftCount(where: CollectionAddressOwnerAddressAttributesInput!, networks: [NetworkInput!] = null): Int!
  ownerCount(where: CollectionAddressAndAttributesInput!, networks: [NetworkInput!] = null): Int!
  ownersByCount(where: CollectionAddressAndAttributesInput!, pagination: PaginationInput = null, networks: [NetworkInput!] = null): OwnerCountConnection!
  salesVolume(where: CollectionAddressOwnerAddressAttributesInput!, timeFilter: TimeFilter = null, networks: [NetworkInput!] = null): SalesVolume!
}

type ApprovalEvent {
  approvalEventType: ApprovalEventType!
  collectionAddress: String!
  ownerAddress: String!
  approvedAddress: String!
  tokenId: String
  approved: Boolean
}

enum ApprovalEventType {
  APPROVAL
  APPROVAL_FOR_ALL
}

input AttributeFilter {
  traitType: String!
  value: String = null
}

type AudioEncodingTypes {
  original: String!
  large: String
}

enum Chain {
  MAINNET
}

type Collection {
  address: String!
  description: String!
  name: String
  symbol: String
  totalSupply: Int
  networkInfo: NetworkInfo!
  attributes: [CollectionAttribute!]
}

input CollectionAddressAndAttributesInput {
  collectionAddresses: [String!] = null
  attributes: [AttributeFilter!] = null
}

input CollectionAddressOwnerAddressAttributesInput {
  collectionAddresses: [String!] = null
  ownerAddresses: [String!] = null
  attributes: [AttributeFilter!] = null
}

type CollectionAttribute {
  traitType: String
  valueMetrics: [CollectionAttributeValue!]!
}

type CollectionAttributeValue {
  value: String!
  count: Int!
  percent: Float!
}

type CollectionConnection {
  nodes: [Collection!]!
  pageInfo: PageInfo!
}

enum CollectionSortKey {
  NONE
  NAME
  CREATED
}

input CollectionSortKeySortInput {
  sortKey: CollectionSortKey!
  sortDirection: SortDirection!
}

input CollectionsQueryInput {
  collectionAddresses: [String!]!
}

type Currency {
  name: String!
  address: String!
  decimals: Int!
}

type CurrencyAmount {
  currency: Currency!
  raw: String!
  decimal: Float!
}

"""Date (isoformat)"""
scalar Date

"""Date with time (isoformat)"""
scalar DateTime

type Event {
  networkInfo: NetworkInfo!
  transactionInfo: TransactionInfo!
  eventType: EventType!
  collectionAddress: String!
  tokenId: String
  properties: EventProperties!
}

type EventConnection {
  nodes: [Event!]!
  pageInfo: PageInfo!
}

union EventProperties = ApprovalEvent | MintEvent | Sale | TransferEvent | V1MarketEvent | V2AuctionEvent | V3AskEvent

enum EventSortKey {
  CREATED
}

input EventSortKeySortInput {
  sortKey: EventSortKey!
  sortDirection: SortDirection!
}

input EventsQueryFilter {
  eventTypes: [EventType!] = null
  senderAddresses: [String!] = null
  recipientAddresses: [String!] = null
  sellerAddresses: [String!] = null
  bidderAddresses: [String!] = null
  timeFilter: TimeFilter = null
}

input EventsQueryInput {
  tokens: [TokenInput!] = null
  collectionAddresses: [String!] = null
}

enum EventType {
  APPROVAL_EVENT
  SALE_EVENT
  MINT_EVENT
  TRANSFER_EVENT
  V1_MARKET_EVENT
  V2_AUCTION_EVENT
  V3_ASK_EVENT
}

type ImageEncodingTypes {
  original: String!
  large: String
  poster: String
  thumbnail: String
}

union ImageEncodingTypesVideoEncodingTypesAudioEncodingTypesUnsupportedEncodingTypes = ImageEncodingTypes | VideoEncodingTypes | AudioEncodingTypes | UnsupportedEncodingTypes

"""
The GenericScalar scalar type represents a generic GraphQL scalar value that could be: List or Object.
"""
scalar JSONScalar

type Market {
  networkInfo: NetworkInfo!
  transactionInfo: TransactionInfo!
  status: String!
  marketAddress: String!
  collectionAddress: String!
  tokenId: String!
  marketType: MarketType!
  properties: MarketProperties!
  price: PriceAtTime
}

enum MarketCategory {
  ASK
  OFFER
  AUCTION
}

union MarketProperties = V1Ask | V1Offer | V1BidShare | V2Auction | V3Ask

enum MarketSortKey {
  NONE
  CREATED
  CHAIN_TOKEN_PRICE
  NATIVE_PRICE
  TIMED_SALE_ENDING
}

input MarketSortKeySortInput {
  sortKey: MarketSortKey!
  sortDirection: SortDirection!
}

input MarketsQueryFilter {
  marketFilters: [MarketTypeFilter!] = null
  priceFilter: PriceFilter = null
}

input MarketsQueryInput {
  tokens: [TokenInput!] = null
  collectionAddresses: [String!] = null
}

enum MarketStatus {
  ACTIVE
  CANCELED
  COMPLETED
}

enum MarketType {
  V1_ASK
  V1_BID_SHARE
  V1_OFFER
  V2_AUCTION
  V3_ASK
}

input MarketTypeFilter {
  marketType: MarketType!
  statuses: [MarketStatus!] = null
  bidderAddresses: [String!] = null
}

type MarketWithToken {
  market: Market!
  token: Token
}

type MarketWithTokenConnection {
  nodes: [MarketWithToken!]!
  pageInfo: PageInfo!
}

enum MediaType {
  IMAGE
  GIF
  VIDEO
  AUDIO
  TEXT
  HTML
}

type Mint {
  tokenId: String!
  collectionAddress: String!
  originatorAddress: String!
  toAddress: String!
  price: PriceAtTime!
  transactionInfo: TransactionInfo!
  networkInfo: NetworkInfo!
}

type MintEvent {
  tokenId: String!
  collectionAddress: String!
  originatorAddress: String!
  toAddress: String!
  price: PriceAtTime!
}

type MintInfo {
  mintContext: TransactionInfo!
  originatorAddress: String!
  toAddress: String!
  price: PriceAtTime!
}

enum MintSortKey {
  NONE
  TIME
  TOKEN_ID
  PRICE
}

input MintSortKeySortInput {
  sortKey: MintSortKey!
  sortDirection: SortDirection!
}

input MintsQueryFilter {
  priceFilter: PriceFilter = null
  timeFilter: TimeFilter = null
}

input MintsQueryInput {
  minterAddresses: [String!] = null
  recipientAddresses: [String!] = null
  collectionAddresses: [String!] = null
  tokens: [TokenInput!] = null
}

type MintWithTokenAndMarkets {
  mint: Mint!
  token: Token
  markets(pagination: PaginationInput = null, sort: MarketSortKeySortInput = null, filter: MarketsQueryFilter = null): [Market!]!
}

type MintWithTokenAndMarketsConnection {
  nodes: [MintWithTokenAndMarkets!]!
  pageInfo: PageInfo!
}

enum Network {
  ETHEREUM
}

type NetworkInfo {
  network: Network!
  chain: Chain!
}

input NetworkInput {
  network: Network! = ETHEREUM
  chain: Chain! = MAINNET
}

type OwnerCount {
  owner: String!
  count: Int!
}

type OwnerCountConnection {
  nodes: [OwnerCount!]!
  pageInfo: PageInfo!
}

type PageInfo {
  limit: Int!
  endCursor: String
  hasNextPage: Boolean!
}

input PaginationInput {
  limit: Int! = 10
  after: String = null
}

type PriceAtTime {
  nativePrice: CurrencyAmount!
  blockNumber: Int!
  chainTokenPrice: CurrencyAmount
  usdcPrice: CurrencyAmount
}

input PriceFilter {
  currencyAddress: String = null
  minimumChainTokenPrice: String = null
  maximumChainTokenPrice: String = null
  minimumNativePrice: String = null
  maximumNativePrice: String = null
}

type RootQuery {
  """Gets counts, sales volume, and other statistics"""
  aggregateStat: AggregateStat!

  """Gets the total set of NFT attributes"""
  aggregateAttributes(where: AggregateAttributesQueryInput!, networks: [NetworkInput!] = null): [AggregateAttribute!]!

  """NFT collection data"""
  collections(where: CollectionsQueryInput = null, sort: CollectionSortKeySortInput = null, pagination: PaginationInput = null, networks: [NetworkInput!] = null): CollectionConnection!

  """Contract event information, e.g. Sales, Transfers, Mints, etc."""
  events(where: EventsQueryInput = null, pagination: PaginationInput = null, sort: EventSortKeySortInput = null, networks: [NetworkInput!] = null, filter: EventsQueryFilter = null): EventConnection!

  """Data for specific ZORA markets, e.g. Buy Now, Auctions, Offers"""
  markets(networks: [NetworkInput!] = null, pagination: PaginationInput = null, sort: MarketSortKeySortInput = null, filter: MarketsQueryFilter = null, where: MarketsQueryInput = null): MarketWithTokenConnection!

  """Historical minting data"""
  mints(networks: [NetworkInput!] = null, pagination: PaginationInput = null, sort: MintSortKeySortInput = null, filter: MintsQueryFilter = null, where: MintsQueryInput = null): MintWithTokenAndMarketsConnection!

  """Historical sales data from ZORA, OpenSea, LooksRare, 0x, and more"""
  sales(where: SalesQueryInput = null, networks: [NetworkInput!] = null, pagination: PaginationInput = null, sort: SaleSortKeySortInput = null, filter: SalesQueryFilter = null): SaleWithTokenConnection!

  """Gets data for multiple tokens"""
  tokens(networks: [NetworkInput!] = null, pagination: PaginationInput = null, sort: TokenSortInput = null, where: TokensQueryInput = null, filter: TokensQueryFilter = null): TokenWithMarketsSummaryConnection!

  """Gets data on a single token"""
  token(token: TokenInput!, network: NetworkInput = null): TokenWithFullMarketHistory

  """Returns search results for a query"""
  search(query: SearchQueryInput!, pagination: SearchPaginationInput!, filter: SearchFilter = null): SearchResultConnection!
}

type Sale {
  saleContractAddress: String
  transactionInfo: TransactionInfo!
  networkInfo: NetworkInfo!
  buyerAddress: String!
  collectionAddress: String!
  saleType: SaleType!
  price: PriceAtTime!
  sellerAddress: String!
  tokenId: String!
}

enum SaleSortKey {
  NONE
  CHAIN_TOKEN_PRICE
  NATIVE_PRICE
  TIME
}

input SaleSortKeySortInput {
  sortKey: SaleSortKey!
  sortDirection: SortDirection!
}

input SalesQueryFilter {
  saleTypes: [SaleType!] = null
  priceFilter: PriceFilter = null
  timeFilter: TimeFilter = null
}

input SalesQueryInput {
  collectionAddresses: [String!] = null
  sellerAddresses: [String!] = null
  buyerAddresses: [String!] = null
  tokens: [TokenInput!] = null
}

type SalesVolume {
  chainTokenPrice: Float!
  usdcPrice: Float!
  totalCount: Int!
}

enum SaleType {
  FOUNDATION_SALE
  NOUNS_AUCTION_SALE
  CRYPTOPUNKS_SALE
  LOOKS_RARE_SALE
  OPENSEA_SINGLE_SALE
  OPENSEA_BUNDLE_SALE
  RARIBLE_SALE
  SUPERRARE_SALE
  ZEROX_SALE
  ZORA_V2_AUCTION_SALE
  ZORA_V3_ASK_SALE
}

type SaleWithToken {
  sale: Sale!
  token: Token
}

type SaleWithTokenConnection {
  nodes: [SaleWithToken!]!
  pageInfo: PageInfo!
}

enum SearchableEntity {
  TOKEN
  COLLECTION
}

input SearchFilter {
  collectionAddresses: [String!] = null
  entityType: SearchableEntity = null
}

input SearchPaginationInput {
  limit: Int! = 10
  after: String = null
}

input SearchQueryInput {
  text: String!
}

type SearchResult {
  name: String
  description: String
  entityType: String!
  collectionAddress: String!
  networkInfo: NetworkInfo!
  entity: TokenCollection
  tokenId: String
}

type SearchResultConnection {
  nodes: [SearchResult!]!
  pageInfo: PageInfo!
}

enum SortDirection {
  ASC
  DESC
}

input TimeFilter {
  startDate: String = null
  endDate: String = null
  lookbackHours: Int = null
}

type Token {
  collectionAddress: String!
  tokenId: String!
  collectionName: String
  mintInfo: MintInfo
  networkInfo: NetworkInfo!
  tokenUrl: String
  tokenUrlMimeType: String
  content: TokenContentMedia
  image: TokenContentMedia
  owner: String
  tokenContract: TokenContract
  name: String
  description: String
  metadata: JSONScalar
  attributes: [TokenAttribute!]
  lastRefreshTime: DateTime
}

type TokenAttribute {
  traitType: String
  value: String
  displayType: String
}

union TokenCollection = Token | Collection

type TokenContentMedia {
  url: String
  mimeType: String
  size: String
  mediaEncoding: ImageEncodingTypesVideoEncodingTypesAudioEncodingTypesUnsupportedEncodingTypes
}

type TokenContract {
  collectionAddress: String!
  chain: Int!
  name: String
  symbol: String
  totalSupply: Int
  description: String
  network: String!
}

input TokenInput {
  address: String!
  tokenId: String!
}

input TokenSortInput {
  sortKey: TokenSortKey!
  sortDirection: SortDirection!
  sortAxis: MarketCategory = null
}

enum TokenSortKey {
  NONE
  MINTED
  TOKEN_ID
  TRANSFERRED
  CHAIN_TOKEN_PRICE
  NATIVE_PRICE
  TIMED_SALE_ENDING
}

input TokensQueryFilter {
  attributeFilters: [AttributeFilter!] = null
  mediaType: MediaType = null
  marketFilters: [MarketTypeFilter!] = null
  priceFilter: PriceFilter = null
}

input TokensQueryInput {
  collectionAddresses: [String!] = null
  ownerAddresses: [String!] = null
  tokens: [TokenInput!] = null
}

type TokenWithFullMarketHistory {
  token: Token!
  markets(pagination: PaginationInput = null, sort: MarketSortKeySortInput = null, filter: MarketsQueryFilter = null): [Market!]!
  events(pagination: PaginationInput = null, sort: EventSortKeySortInput = null, filter: EventsQueryFilter = null): [Event!]!
  sales(pagination: PaginationInput = null, sort: SaleSortKeySortInput = null, filter: SalesQueryFilter = null): [Sale!]!
}

type TokenWithMarketsSummary {
  token: Token!
  marketsSummary: [Market!]!
  events(pagination: PaginationInput = null, sort: EventSortKeySortInput = null, filter: EventsQueryFilter = null): [Event!]!
  sales(pagination: PaginationInput = null, sort: SaleSortKeySortInput = null, filter: SalesQueryFilter = null): [Sale!]!
}

type TokenWithMarketsSummaryConnection {
  nodes: [TokenWithMarketsSummary!]!
  pageInfo: PageInfo!
}

type TransactionInfo {
  blockNumber: Int!
  blockTimestamp: Date!
  transactionHash: String
  logIndex: Int
}

type TransferEvent {
  fromAddress: String!
  toAddress: String!
  collectionAddress: String!
  tokenId: String!
}

type UnsupportedEncodingTypes {
  original: String!
}

type V1Ask {
  collectionAddress: String!
  tokenId: String!
  amount: PriceAtTime!
  currency: String!
  v1AskStatus: V1MarketEntityStatus!
}

type V1BidShare {
  tokenId: String!
  collectionAddress: String!
  previousOwner: String!
  creator: String!
  owner: String!
  v1BidShareStatus: V1MarketEntityStatus!
}

type V1MarketAskCreatedEventProperties {
  amount: String!
  price: PriceAtTime!
  currency: String!
}

type V1MarketAskRemovedEventProperties {
  amount: String!
  price: PriceAtTime!
  currency: String!
}

type V1MarketBidShareUpdatedEventProperties {
  previousOwner: String!
  creator: String!
  owner: String!
}

enum V1MarketEntityStatus {
  ACTIVE
  CANCELED
  COMPLETED
}

type V1MarketEvent {
  v1MarketEventType: V1MarketEventType!
  address: String!
  collectionAddress: String!
  tokenId: String!
  properties: V1MarketEventProperties!
}

union V1MarketEventProperties = V1MarketAskCreatedEventProperties | V1MarketAskRemovedEventProperties | V1MarketOfferCreatedEventProperties | V1MarketOfferFinalizedEventProperties | V1MarketOfferRemovedEventProperties | V1MarketBidShareUpdatedEventProperties

enum V1MarketEventType {
  V1_MARKET_BID_CREATED
  V1_MARKET_BID_REMOVED
  V1_MARKET_BID_FINALIZED
  V1_MARKET_ASK_CREATED
  V1_MARKET_ASK_REMOVED
  V1_MARKET_BID_SHARE_UPDATED
}

type V1MarketOfferCreatedEventProperties {
  amount: String!
  price: PriceAtTime!
  currency: String!
  bidder: String!
  recipient: String!
  sellOnShare: String!
}

type V1MarketOfferFinalizedEventProperties {
  amount: String!
  price: PriceAtTime!
  currency: String!
  bidder: String!
  recipient: String!
  sellOnShare: String!
}

type V1MarketOfferRemovedEventProperties {
  amount: String!
  price: PriceAtTime!
  currency: String!
  bidder: String!
  recipient: String!
  sellOnShare: String!
}

type V1Offer {
  amount: PriceAtTime!
  currency: String!
  bidder: String!
  recipient: String!
  sellOnShare: String!
  tokenId: String!
  collectionAddress: String!
  v1OfferStatus: V1MarketEntityStatus!
}

type V2Auction {
  address: String!
  tokenId: String!
  collectionAddress: String!
  auctionId: String!
  v2AuctionStatus: V2AuctionStatus!
  approved: Boolean!
  auctionCurrency: String!
  highestBidPrice: PriceAtTime
  duration: String!
  firstBidTime: DateTime
  reservePrice: PriceAtTime!
  curatorFeePercentage: Int!
  tokenOwner: String!
  highestBidder: String
  curator: String!
  estimatedExpirationTime: DateTime
  amountCuratorReceived: PriceAtTime
  amountTokenOwnerReceived: PriceAtTime
}

type V2AuctionApprovalUpdatedEventProperties {
  approved: Boolean!
}

type V2AuctionBidEventProperties {
  sender: String!
  firstBid: Boolean!
  extended: Boolean!
  value: String!
  price: PriceAtTime!
}

type V2AuctionCanceledEventProperties {
  tokenOwner: String!
}

type V2AuctionCreatedEventProperties {
  auctionCurrency: String!
  tokenOwner: String!
  curator: String!
  curatorFeePercentage: Int!
  duration: String!
  reservePrice: String!
  price: PriceAtTime!
}

type V2AuctionDurationExtendedEventProperties {
  duration: String!
}

type V2AuctionEndedEventProperties {
  tokenOwner: String!
  curator: String!
  winner: String!
  auctionCurrency: String!
  amount: String!
  curatorFee: String!
}

type V2AuctionEvent {
  v2AuctionEventType: V2AuctionEventType!
  address: String!
  auctionId: Int!
  collectionAddress: String!
  tokenId: String!
  properties: V2AuctionEventProperties!
}

union V2AuctionEventProperties = V2AuctionBidEventProperties | V2AuctionCreatedEventProperties | V2AuctionCanceledEventProperties | V2AuctionDurationExtendedEventProperties | V2AuctionEndedEventProperties | V2AuctionReservePriceUpdatedEventProperties | V2AuctionApprovalUpdatedEventProperties

enum V2AuctionEventType {
  V2_AUCTION_CREATED
  V2_AUCTION_CANCELED
  V2_AUCTION_RESERVE_PRICE_UPDATED
  V2_AUCTION_BID
  V2_AUCTION_DURATION_EXTENDED
  V2_AUCTION_APPROVAL_UPDATED
  V2_AUCTION_ENDED
}

type V2AuctionReservePriceUpdatedEventProperties {
  reservePrice: String!
  price: PriceAtTime!
}

enum V2AuctionStatus {
  ACTIVE
  CANCELED
  COMPLETED
  EXPIRED
}

type V3Ask {
  v3AskStatus: V3AskStatus!
  address: String!
  collectionAddress: String!
  tokenId: String!
  seller: String!
  sellerFundsRecipient: String!
  askCurrency: String!
  askPrice: PriceAtTime!
  findersFeeBps: Int!
  buyer: String
  finder: String
}

type V3AskCanceledEventProperties {
  seller: String!
  sellerFundsRecipient: String!
  askCurrency: String!
  askPrice: String!
  findersFeeBps: Int!
  price: PriceAtTime!
}

type V3AskCreatedEventProperties {
  seller: String!
  sellerFundsRecipient: String!
  askCurrency: String!
  askPrice: String!
  findersFeeBps: Int!
  price: PriceAtTime!
}

type V3AskEvent {
  v3AskEventType: V3AskEventType!
  address: String!
  collectionAddress: String!
  tokenId: String!
  properties: V3AskEventProperties!
}

union V3AskEventProperties = V3AskCreatedEventProperties | V3AskCanceledEventProperties | V3AskPriceUpdatedEventProperties | V3AskFilledEventProperties

enum V3AskEventType {
  V3_ASK_CREATED
  V3_ASK_CANCELED
  V3_ASK_PRICE_UPDATED
  V3_ASK_FILLED
}

type V3AskFilledEventProperties {
  seller: String!
  sellerFundsRecipient: String!
  askCurrency: String!
  askPrice: String!
  findersFeeBps: Int!
  buyer: String!
  finder: String!
  price: PriceAtTime!
}

type V3AskPriceUpdatedEventProperties {
  seller: String!
  sellerFundsRecipient: String!
  askCurrency: String!
  askPrice: String!
  findersFeeBps: Int!
  price: PriceAtTime!
}

enum V3AskStatus {
  ACTIVE
  CANCELED
  COMPLETED
}

type VideoEncodingTypes {
  original: String!
  large: String
  poster: String
  preview: String
  thumbnail: String
}

